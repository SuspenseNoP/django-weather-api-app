name: Deploy Django to EC2

on:
  workflow_run:
    workflows: ["Build and Publish Docker Image"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Checkout infrastructure
        uses: actions/checkout@v4
        with:
          path: terraform

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Get EC2 IP
        working-directory: ./terraform
        run: |
          echo "EC2_HOST=$(terraform output -raw ec2_instance_public_ip)" >> $GITHUB_ENV
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
      
      - name: Wait for EC2 to become ready with Docker
        run: |
          echo "Waiting for EC2 at ${{ env.EC2_HOST }} to be ready..."

          for i in {1..30}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@${{ env.EC2_HOST }} 'command -v docker' >/dev/null 2>&1; then
              echo "EC2 is ready and Docker is installed."
              break
            fi
            echo "Still waiting... ($i/30)"
            sleep 10
          done

      - name: Copy docker-compose and configs to EC2
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/
          scp -o StrictHostKeyChecking=no .env ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/
          scp -o StrictHostKeyChecking=no -r nginx/ ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/nginx/

      - name: Deploy with docker compose
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ubuntu
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin || true
            sudo docker compose pull || true
            sudo docker compose up -d --build
            sudo docker image prune -f
          EOF

